{"version":3,"sources":["components/NewsCard.js","App.js","serviceWorker.js","index.js"],"names":["MetricStatusButton","props","className","MetricStatusButtonInner","statusColour","onStatusButtonClicked","statusIcon","honestyMetric","shadowClass","shadow","Button","size","style","background","borderColor","onClick","id","icon","GetMetricStatusIcon","metric","faSadCry","faSmileBeam","faSmile","faMeh","faFrown","Thumbnail","image","CardImg","src","source","alt","NewsCard","state","rateSurveyModal","showMetricBreakdown","onCardClick","bind","showSurveyModal","window","open","this","url","setState","prevState","t","lerpColour","userStatusIcon","userHonestyMetric","rippleAnimationClass","rippleOverlayBlockEventsClass","metricBreakdownAnimationClass","userMetricStatusAnimationClass","rateButtonAnimationClass","breakdownFactorBars","breakdownFactors","map","factor","Col","md","key","name","Progress","value","max","Card","Row","CardBody","borderLeftColor","CardTitle","tag","title","CardText","minHeight","Truncate","lines","content","thumbnail","UncontrolledTooltip","placement","target","color","faPoll","Modal","isOpen","toggle","ModalHeader","ModalBody","width","height","ModalFooter","sm","xs","Component","App","articles","fetch","method","then","response","json","responseJson","i","length","article","citationScore","headline","decodeURI","replace","mediaScore","opinionScore","rating","timestamp","authorReliability","siteReliability","articleContent","text","responseText","articleExtractor","catch","error","console","push","sort","a","b","Date","articleCards","Math","round","Container","moment","format","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d316b8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Col, Row, Button,\r\n  Card, CardImg, CardText, CardBody, CardTitle,\r\n  Modal, ModalHeader, ModalBody, ModalFooter,\r\n  UncontrolledTooltip, Progress \r\n} from 'reactstrap';\r\nimport Truncate from 'react-truncate';\r\nimport lerpColour from 'color-interpolate';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSmileBeam, faSmile, faMeh, faFrown, faSadCry, faUsers, faPoll } from '@fortawesome/free-solid-svg-icons';\r\nimport './NewsCard.css';\r\n\r\nfunction MetricStatusButton(props) {\r\n  return (\r\n    <div className=\"news-card-score-overlay\">\r\n      <MetricStatusButtonInner className={props.className} statusColour={props.statusColour} \r\n        onStatusButtonClicked={props.onStatusButtonClicked} statusIcon={props.statusIcon} \r\n        honestyMetric={props.honestyMetric} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MetricStatusButtonInner(props) {\r\n  const shadowClass = 'shadow' in props && props.shadow ? 'shadow' : '';\r\n  return (\r\n    <Button size=\"md\" style={{background: props.statusColour, borderColor: props.statusColour}} \r\n      className={\"news-card-score-button \" + shadowClass + \" \" + props.className} onClick={props.onStatusButtonClicked}\r\n      id={props.id}>\r\n        <div className=\"w-100 h-100 align-self-center\">\r\n          <FontAwesomeIcon icon={props.statusIcon} className=\"mr-2\" />\r\n          <strong>{props.honestyMetric}</strong>\r\n        </div>\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction GetMetricStatusIcon(metric) {\r\n    // Determine the status icon.\r\n    let statusIcon = faSadCry;\r\n    if (metric >= 90) {\r\n      // If honesty metric is between 100 and 90, use the faSmileBeam icon.\r\n      statusIcon = faSmileBeam;\r\n    }\r\n    // Use the smile icon in the [70, 90) interval.\r\n    if (metric < 90 && metric >= 70) {\r\n      statusIcon = faSmile;\r\n    }\r\n    // Use the meh icon in the [40, 70) interval.\r\n    else if (metric < 70 && metric >= 40) {\r\n      statusIcon = faMeh;\r\n    }\r\n    // Use the frown icon in the [20, 40) interval.\r\n    else if (metric < 40 && metric >= 20) {\r\n      statusIcon = faFrown;\r\n    }\r\n\r\n    return statusIcon;\r\n}\r\n\r\nfunction Thumbnail(props) {\r\n  if ('image' in props && props.image != null) {\r\n    return (\r\n      <CardImg src={props.image.source} alt={props.image.alt}\r\n        className=\"card-img-top card-thumbnail\" />\r\n    );\r\n  }\r\n\r\n  return (null);\r\n}\r\n\r\nexport default class NewsCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rateSurveyModal: false,\r\n      showMetricBreakdown: false\r\n    }\r\n\r\n    this.onCardClick = this.onCardClick.bind(this);\r\n    this.onStatusButtonClicked = this.onStatusButtonClicked.bind(this);\r\n    this.showSurveyModal = this.showSurveyModal.bind(this);\r\n  }\r\n\r\n  onCardClick() {\r\n    window.open(this.props.url, '_blank');\r\n  }\r\n\r\n  onStatusButtonClicked() {\r\n    this.setState({\r\n      showMetricBreakdown: !this.state.showMetricBreakdown\r\n    });\r\n  }\r\n\r\n  showSurveyModal() {\r\n    this.setState(prevState => ({\r\n      rateSurveyModal: !prevState.rateSurveyModal\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const t = this.props.honestyMetric / 100;\r\n    let statusColour;\r\n    if (this.props.honestyMetric <= 50) {\r\n      statusColour = lerpColour(['#d9534f', '#f0ad4e'])(t * 2);\r\n    }\r\n    else {\r\n      statusColour = lerpColour(['#f0ad4e', '#50a847', '#28a745'])(t / 2);\r\n    }\r\n  \r\n    const statusIcon = GetMetricStatusIcon(this.props.honestyMetric);\r\n    const userStatusIcon = GetMetricStatusIcon(this.props.userHonestyMetric);\r\n\r\n    const rippleAnimationClass = this.state.showMetricBreakdown ? 'animate-ripple' : '';\r\n    const rippleOverlayBlockEventsClass = this.state.showMetricBreakdown ? 'block-events' : '';\r\n    const metricBreakdownAnimationClass = this.state.showMetricBreakdown ? 'animate-metric-breakdown-content' : '';\r\n    const userMetricStatusAnimationClass = this.state.showMetricBreakdown ? 'animate-user-metric-status' : '';\r\n    const rateButtonAnimationClass = this.state.showMetricBreakdown ? 'animate-rate-button' : '';\r\n\r\n    const breakdownFactorBars = this.props.breakdownFactors.map((factor) => (\r\n      <Col md=\"6\" className=\"pl-0\" key={factor.name}>  \r\n        <div className=\"text-left\">{factor.name}</div>\r\n        <Progress value={factor.value} max=\"100\" />\r\n      </Col>\r\n    ));\r\n\r\n    return (\r\n      <Card className=\"news-card shadow border-0\">\r\n        <Row>\r\n          <Col md=\"9\" className=\"order-12\">\r\n            <CardBody className={\"callout \" + rippleOverlayBlockEventsClass}\r\n               style={{borderLeftColor: statusColour}}>\r\n              <strong className=\"mb-2 text-secondary\">{this.props.source.name}</strong>\r\n              <CardTitle className=\"news-card-title mb-0 w-100\" tag=\"h3\" onClick={this.onCardClick}>\r\n                {this.props.title}\r\n              </CardTitle>\r\n              <CardText tag=\"p\" className=\"text-secondary mb-auto w-100 mt-3\" style={{minHeight: 'calc(2rem * 3)'}}>\r\n                <Truncate lines={3}>\r\n                  {this.props.content}\r\n                </Truncate>\r\n              </CardText>\r\n            </CardBody>\r\n          </Col>\r\n          <Col md=\"3\" className=\"order-1 order-md-12 card-thumbnail-col\">\r\n            <Thumbnail image={this.props.thumbnail} />\r\n            <MetricStatusButton statusColour={statusColour} statusIcon={statusIcon}\r\n              onStatusButtonClicked={this.onStatusButtonClicked} honestyMetric={this.props.honestyMetric} \r\n              className=\"m-3\" shadow />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"ripple-overlay\">\r\n          <div className={\"ripple \" + rippleAnimationClass} style={{background: statusColour}} />\r\n          <div className=\"ripple-overlay w-100\">\r\n            <Row>\r\n              <Col className=\"d-flex flex-row justify-content-end\">           \r\n                <MetricStatusButtonInner statusColour={statusColour} statusIcon={statusIcon}\r\n                  onStatusButtonClicked={this.onStatusButtonClicked} honestyMetric={this.props.honestyMetric}\r\n                  className=\"m-3\" />\r\n              </Col>\r\n              <div className=\"w-100\"></div>\r\n              <Col className=\"d-flex flex-row justify-content-end\">           \r\n                <MetricStatusButtonInner statusColour={statusColour} statusIcon={userStatusIcon} \r\n                  honestyMetric={this.props.userHonestyMetric} id=\"userMetricStatusButton\"\r\n                  className={\"user-metric-status mx-3 \" + userMetricStatusAnimationClass} />\r\n                  <UncontrolledTooltip placement=\"right\" target=\"userMetricStatusButton\">\r\n                    This is how users have rated this source.\r\n                  </UncontrolledTooltip>\r\n              </Col>\r\n              <div className=\"w-100\"></div>\r\n              <Col className=\"d-flex flex-row justify-content-end align-bottom\">\r\n                <Button size=\"md\" color=\"dark\" className={\"m-3 news-card-score-button rate-button \" + rateButtonAnimationClass}\r\n                  onClick={this.showSurveyModal}>\r\n                    <div className=\"w-100 h-100 align-self-center\">\r\n                      <FontAwesomeIcon icon={faPoll} className=\"mr-2\" />\r\n                      <strong>Rate</strong>\r\n                    </div>\r\n                </Button>\r\n                <Modal isOpen={this.state.rateSurveyModal} toggle={this.showSurveyModal}>\r\n                  <ModalHeader toggle={this.showSurveyModal}>Rate it yourself!</ModalHeader>\r\n                  <ModalBody>\r\n                    <iframe title=\"User Rating Survey\" src=\"./rating-survey-embed.html\"\r\n                      width=\"600px\" height=\"400px\"></iframe>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button color=\"primary\" onClick={this.showSurveyModal}>Done!</Button>{' '}\r\n                  </ModalFooter>\r\n                </Modal>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n          <Card className={\"ripple-overlay w-100 metric-breakdown-content \" + metricBreakdownAnimationClass}>\r\n            <CardBody>\r\n              <CardTitle className=\"news-card-title mb-0 w-100\" tag=\"h5\">\r\n                How was this rated?\r\n              </CardTitle>\r\n              <Col md=\"9\" sm=\"9\" xs=\"8\">\r\n                <Row className=\"mt-2\">\r\n                  {breakdownFactorBars}\r\n                </Row>\r\n              </Col>\r\n            </CardBody>\r\n          </Card>\r\n        </Row>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Container } from 'reactstrap';\r\nimport NewsCard from './components/NewsCard';\r\nimport moment from 'moment';\r\nimport articleExtractor from 'unfluff';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setState({\r\n      articles: null\r\n    });\r\n  }\r\n  \r\n  componentDidMount() {\r\n    let articles = [];\r\n    fetch('https://honesty-matters-news.appspot.com/pleasegivemedatamylordplease', {method: 'post'})\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        for (let i = 0; i < responseJson.length; ++i) {\r\n          let article = {\r\n            citationScore: responseJson[i]['citation_score'],\r\n            headline: decodeURI(responseJson[i]['headline']).replace(/\\\\/g, ''),\r\n            mediaScore: responseJson[i]['media_score'],\r\n            opinionScore: responseJson[i]['opinion_score'],\r\n            rating: responseJson[i]['rating'],\r\n            thumbnail: responseJson[i]['thumbnail'],\r\n            timestamp: responseJson[i]['timestamp'],\r\n            url: responseJson[i]['url'],\r\n            authorReliability: responseJson[i]['author_reliability'],\r\n            siteReliability: responseJson[i]['site_reliability']\r\n          };\r\n\r\n          let articleContent = '';\r\n          fetch(article.url)\r\n            .then(response => response.text())\r\n            .then(responseText => {\r\n              articleContent = articleExtractor(responseText).text;\r\n            })\r\n            .catch(error => console.error(error));\r\n  \r\n          article['content'] = articleContent;\r\n          articles.push(article);\r\n        }\r\n\r\n        articles.sort((a, b) => new Date(b.timestamp) >= new Date(a.timestamp) ? 1 : -1);\r\n        this.setState({\r\n          articles: articles\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        this.setState({\r\n          articles: null\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state === null) return null;\r\n    const articleCards = this.state.articles.map((article) => {\r\n      const honestyMetric = Math.round((article.rating + article.authorReliability + article.siteReliability) / 3);\r\n      return (\r\n        <Container className=\"app-container py-3\" key={article.url}>\r\n          <NewsCard source={{ name: moment(article.timestamp).format('MMMM Do YYYY, h:mm:ss a') }}\r\n            honestyMetric={honestyMetric} userHonestyMetric={70}\r\n            title={article.headline}\r\n            content={article.content}\r\n            thumbnail={{ source: article.thumbnail, alt: \"Thumbnail\" }}\r\n            url={article.url}\r\n            breakdownFactors={[\r\n              { name: \"Presence of Citations\", value: article.citationScore },\r\n              { name: \"Objectivity\", value: article.opinionScore },\r\n              { name: \"Media Score\", value: article.mediaScore},\r\n              { name: \"Author Reliability\", value: article.authorReliability },\r\n              { name: \"Site Reliability\", value: article.siteReliability },\r\n            ]} />\r\n        </Container>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"App\">\r\n        {articleCards}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}